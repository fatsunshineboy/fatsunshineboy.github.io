(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{341:function(t,s,n){"use strict";n.r(s);var e=n(10),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git-push-u"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-push-u"}},[t._v("#")]),t._v(" git push -u")]),t._v(" "),s("p",[t._v("参数解析：")]),t._v(" "),s("p",[t._v("首先对于 git push,有这样一段描述：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("-u\n\n–set-upstream\n\nFor every branch that is up to date or successfully pushed, add upstream (tracking) reference,\nused by argument-less git-pull(1) and other commands. For more information, see branch.<name>.\nmerge in git-config(1)\n")])])]),s("p",[t._v("在这个描述中，可以看到 -u 参数与下面这个变量相关")]),t._v(" "),s("p",[s("code",[t._v("branch.<name>.merge")])]),t._v(" "),s("p",[s("code",[t._v("branch.<name>.merge")]),t._v("与"),s("code",[t._v("branch.<name>.remote")]),t._v("一起定义给定分支的上游分支（upstream）。它告诉git fetch/git pull要合并哪个分支，还可以影响git push.")]),t._v(" "),s("p",[t._v("而upstream是指其他人将从中获取的主要存储库，例如您的GitHub存储库。-u选项自动为您设置上游，将您的仓库链接到一个中央仓库。这样，将来Git会“知道”您要推送到的位置以及您要从哪里提取的信息，因此您可以使用git pull或git push不使用参数。")]),t._v(" "),s("p",[t._v("当您git pull从分支进行操作而未指定源远程或分支时，git会查看 "),s("code",[t._v("branch.<name>.merge")]),t._v(" 设置以了解从何处提取。而正是git push -u 命令为您要推送的分支设置此信息。")]),t._v(" "),s("p",[t._v("至此，简单来说，带上-u 参数其实就相当于记录了push到远端分支的默认值，这样当下次我们还想要继续push的这个远端分支的时候推送命令就可以简写成git push即可。")]),t._v(" "),s("p",[t._v("其实，执行添加了-u 参数的命令 "),s("code",[t._v("git push -u origin master")]),t._v("就相当于是执行了"),s("code",[t._v("git push origin master")]),t._v(" 和"),s("code",[t._v("git branch --set-upstream master origin/master")]),t._v("。")]),t._v(" "),s("p",[t._v("所以，在进行推送代码到远端分支，且之后希望持续向该远程分支推送，则可以在推送命令中添加 -u 参数，简化之后的推送命令输入。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.php.cn/tool/git/493447.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章来源"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"git-clone-分支问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-clone-分支问题"}},[t._v("#")]),t._v(" git clone 分支问题")]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("调用"),s("code",[t._v("git branch")]),t._v("发现只有默认分支,网上有博客说"),s("code",[t._v("git clone url")]),t._v("就是"),s("code",[t._v("git clone -b master url")]),t._v("的缩写,也就是说本地只会有默认分支，还得自己手动创建关联其他分支。笔者认为git clone的时候已经把所有分支拉取下来了，只是本地没有创建分支,通过"),s("code",[t._v("git checkout <branch_name>")]),t._v("可以在本地新建分支，并且自动拉取跟踪远程分支，但这个拉取并不是实时从远程仓库中来的，而是在git clone的时候就已经拉去过来的，可以用test仓库做个实验")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#先clone一个仓库")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@github.com:fatsunshineboy/test.git\nCloning into "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\nremote: Enumerating objects: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("122")]),t._v(", done.\nremote: Counting objects: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("122")]),t._v("/122"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\nremote: Compressing objects: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("77")]),t._v("/77"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\nremote: Total "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("122")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", reused "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("delta "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", pack-reused "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nReceiving objects: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("122")]),t._v("/122"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("22.48")]),t._v(" KiB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.49")]),t._v(" MiB/s, done.\nResolving deltas: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("% "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v("/27"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(", done.\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#调用 git branch -a 查看分支")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n* main\n  remotes/origin/HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/main\n  remotes/origin/main\n  remotes/origin/master\n  remotes/origin/test\n  remotes/origin/test123\n  remotes/origin/test456\n")])])]),s("p",[t._v("本地只有main分支，这个时候在github上手动给test分支添加一个test.md文件并提交\n"),s("img",{attrs:{src:"/imgs/record/git_idea/clone%E7%9A%84%E7%96%91%E9%9A%BE%E6%9D%82%E7%82%B9.png",alt:"git疑难杂点"}})]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这个时候调用git checkout master")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v("\nbranch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" up to track "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'origin/master'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看文件列表")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(".txt  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(".md  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(".txt  test.txt\n")])])]),s("p",[t._v("test.md并没有被拉取下来，说明没有从远程拉取。而且，在一般情况下，直接调用"),s("code",[t._v("git checkout branch")]),t._v("，如果branch不存在应该报错，git clone情况下，如果远程仓库有同名分支，就会新建并且跟踪远程分支。")]),t._v(" "),s("blockquote",[s("p",[t._v("猜测会不会是git checkout先从本地寻找分支，找不到去远程仓库寻找分支，结果验证失败，说明还是git clone的时候肯定把远程分支拉取下来了。\n验证如下：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在本地初始化仓库")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\nInitialized empty Git repository "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" C:/Users/15203/Desktop/新建文件夹 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("/.git/\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#绑定远程仓库")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@github.com:fatsunshineboy/test.git\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#先拉取下master分支")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#切换一个本地没有但远程仓库有的分支，如main")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout main\nerror: pathspec "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'main'")]),t._v(" did not match any file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" known to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n")])])]),s("p",[t._v("说明checkout不会从根据远程仓库的分支创建新分支，但是在"),s("code",[t._v("git clone")]),t._v("的仓库中例外")])]),t._v(" "),s("p",[t._v("再换一个方法证明一下，如果"),s("code",[t._v("git clone url")]),t._v("就是"),s("code",[t._v("git clone -b master url")]),t._v("的缩写，我们在clone的时候就直接用"),s("code",[t._v("git clone -b master url")]),t._v("，看这个时候"),s("code",[t._v("git checkout <branch_name>")]),t._v("会不会起作用")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#调用git clone -b [分支] <远程仓库URL>")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone -b main git@github.com:fatsunshineboy/test.git\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#打开github，在test分支上新加一个checkout.md")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#这个时候在调用git checkout <branch>")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\nSwitched to branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v("\nYour branch is up to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("date")]),t._v(" with "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'origin/master'")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#本地仍然不会增加checkout.md")]),t._v("\n")])])]),s("p",[t._v("总结一下"),s("br"),t._v("\ngit clone或者git clone -b在本地都只会展现一个分支，调用"),s("code",[t._v("git checkout <branch_name>")]),t._v("时（本地没有这个分支，并且本地的这个仓库是由git clone而来），如果远程有指定分支，就会在本地新建并且拉取跟踪这个分支，但是这个分支并不是远程最新（不是类似于git pull）的，而是调用"),s("code",[t._v("git clone")]),t._v("时仓库的状态")])])}),[],!1,null,null,null);s.default=a.exports}}]);