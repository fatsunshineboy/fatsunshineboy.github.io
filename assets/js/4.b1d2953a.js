(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{302:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase1.d62518ec.jpg"},303:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase2.e2ec713f.jpg"},304:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase3.1e4129de.jpg"},305:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase4.99f62fd2.jpg"},306:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase5.3b0fce7a.jpg"},307:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase6.a3b3d4d0.png"},308:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase7.8994721a.png"},309:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase8.8e736405.png"},310:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase9.246508e5.jpg"},311:function(t,s,a){t.exports=a.p+"assets/img/commit_rebase10.72c90850.png"},342:function(t,s,a){"use strict";a.r(s);var e=a(10),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git基础"}},[t._v("#")]),t._v(" Git基础")]),t._v(" "),s("h3",{attrs:{id:"git安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git安装"}},[t._v("#")]),t._v(" Git安装")]),t._v(" "),s("ul",[s("li",[t._v("windows从git官网"),s("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("下载安装程序"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("Linux安装")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v("\n")])])]),s("h3",{attrs:{id:"git配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git配置"}},[t._v("#")]),t._v(" Git配置")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Your Name"')]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email@example.com"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置别名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global alias.lg "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"")]),t._v("\n")])])]),s("h3",{attrs:{id:"git使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git使用"}},[t._v("#")]),t._v(" Git使用")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 创建版本库\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 把文件添加到仓库\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 把文件提交到本地仓库\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". -m "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 关联远程仓库\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("远程仓库别名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库URL"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(".推送到远程仓库\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("远程仓库别名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"git修改文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git修改文件"}},[t._v("#")]),t._v(" Git修改文件")]),t._v(" "),s("h3",{attrs:{id:"版本回退"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#版本回退")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#记录每一次命令(防止回退错误)")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reflog\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("注意^与~之间的区别，当存在多个分支时，^可以用来选择分支，HEAD~i永远只选择第i级父节点的第一个分支，以此类推；HEAD^=HEAD^1=HEAD~1；如果没有分支，只有一条主线，则HEAD^^^=HEAD^1^1^1=HEAD~3，如果该级节点有第二个分支，则表示为：HEAD^^^2 = HEAD~2^2")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("G   H   I   J\n \\ /     \\ /\n  D   E   F\n   \\  |  / \\\n    \\ | /   |\n     \\|/    |\n      B     C\n       \\   /\n        \\ /\n         A\nA =      = A^0\nB = A^   = A^1     = A~1\nC = A^2  = A^2\nD = A^^  = A^1^1   = A~2\nE = B^2  = A^^2\nF = B^3  = A^^3\nG = A^^^ = A^1^1^1 = A~3\nH = D^2  = B^^2    = A^^^2  = A~2^2\nI = F^   = B^3^    = A^^3^\nJ = F^2  = B^3^2   = A^^3^2\n")])])])]),t._v(" "),s("h3",{attrs:{id:"撤销修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),s("p",[t._v("场景1：修改了工作区某个文件的内容，但没有添加到暂存区，想直接丢弃工作区的修改时，用命令"),s("code",[t._v("git restore <filename>")])]),t._v(" "),s("p",[t._v("场景2：当修改了工作区某个文件的内容，还添加到了暂存区时，想丢弃所有修改，分两步，第一步用命令"),s("code",[t._v("git restore --staged <filnamne>")]),t._v("，就回到了场景1，第二步按场景1操作。")]),t._v(" "),s("p",[t._v("场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，使用版本回退")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("--source")]),t._v("可以指定文件 "),s("code",[t._v("git restore <filename> --source HEAD <filename>")])]),t._v(" "),s("li",[t._v("在未给定 source 的情况下，如果使用 "),s("code",[t._v("--staged")]),t._v(" ，从 "),s("code",[t._v("HEAD")]),t._v(" 恢复(覆盖)暂存区，否则从暂存区恢复(覆盖)工作区")])])]),t._v(" "),s("h3",{attrs:{id:"撤销删除"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销删除"}},[t._v("#")]),t._v(" 撤销删除")]),t._v(" "),s("ol",[s("li",[t._v("删除文件")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("1. 手动在工作区删除文件")]),s("br"),t._v("\n使用"),s("code",[t._v("git rm <filename>")]),t._v("和"),s("code",[t._v("git add<filename>")]),t._v("效果一样，都将添加到暂存区"),s("br"),t._v(" "),s("strong",[t._v("2. 直接使用"),s("code",[t._v("git rm <filename>")])]),s("br"),t._v("\n会自动删除工作区的文件，并且直接添加到暂存区")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("撤销删除")])]),t._v(" "),s("blockquote",[s("p",[t._v("方法同"),s("a",{attrs:{href:"#%E6%92%A4%E9%94%80%E4%BF%AE%E6%94%B9"}},[t._v("撤销修改")])])]),t._v(" "),s("h3",{attrs:{id:"commit合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit合并"}},[t._v("#")]),t._v(" commit合并")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/139321091",target:"_blank",rel:"noopener noreferrer"}},[t._v("文章来源"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Git 合并多个提交的正确方式")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("应用场景\n对于一个项目，你可能会多次提交代码，每次提交都对应一commit sha，当完成项目，要进行分支合并的时候，只想保留一个或某几个 commit，这时候就需要合并 commit 了。\n"),s("img",{attrs:{src:a(302),alt:"alt"}})])]),t._v(" "),s("li",[s("p",[t._v("如何合并\n这里介绍两种方式，第一种是git rebase，第二种是git rebase --autosquash，后者在git commit时是有条件的。")])])]),t._v(" "),s("p",[t._v("1） git rebase\n第一步，开启交互模式")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit_sha"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("注意，这里的 "),s("code",[t._v("<commit_sha>")]),t._v(" 是你针对此项目第一个提交的前一个提交的commit。")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("p",[t._v("下面是工作中的提交记录：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(303),alt:"alt"}})]),t._v(" "),s("p",[t._v("这时我们想要把前七个 "),s("code",[t._v("commit")]),t._v(" 合并成一个，即：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(304),alt:"alt"}})]),t._v(" "),s("p",[t._v("其中 "),s("code",[t._v("commit_sha")]),t._v(" 是第一个提交的前一个提交的哈希。 因此，在我的示例中，命令为：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i 6394dc\n")])])]),s("p",[t._v("第二步，摘取合并")]),t._v(" "),s("p",[t._v("这时候会弹出一个框，列出了你想要合并的所有 "),s("code",[t._v("commit")]),t._v(" 。注意列出的顺序是从老到新的。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(305),alt:"alt"}})]),t._v(" "),s("p",[t._v("更改 "),s("code",[t._v("commit_sha")]),t._v(" 最前面的单词，我们打算把这七个合并成一个 "),s("code",[t._v("commit")]),t._v("，那么更改如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(306),alt:"alt"}})]),t._v(" "),s("p",[t._v("保存退出后，又弹出一个新的框，让我们更改 "),s("code",[t._v("commit")]),t._v(" 信息，编辑完后退出就好了。最后完成的效果如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(307),alt:"alt"}})]),t._v(" "),s("ol",[s("li",[t._v("git rebase --autosquash")])]),t._v(" "),s("p",[t._v("顾名思义，就是会自动帮你压缩 "),s("code",[t._v("commit")]),t._v("。但是你在 "),s("code",[t._v("git commit")]),t._v(" 的时候需要使用特殊命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --fixup"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit_sha"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("这里的 "),s("code",[t._v("commit_sha")]),t._v(" 是指你对哪个 "),s("code",[t._v("commit")]),t._v(" 进行了更改，所以必须先至少存在一个对该项目的提交。")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("p",[t._v("下面是工作中的提交记录：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(308),alt:"alt"}})]),t._v(" "),s("p",[t._v("我现在有有了一个新的改动，那么在提交时，就需要用如下命令表明我是对上一个 "),s("code",[t._v("commit")]),t._v(" 进行了更改：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --fixup"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("d94e78\n")])])]),s("p",[t._v("产生的效果是这样的：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(309),alt:"alt"}})]),t._v(" "),s("p",[t._v("这时候又有了一个新的改动，那么提交时的命令不变：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --fixup"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("d94e78\n")])])]),s("p",[t._v("产生的效果：")]),t._v(" "),s("p",[s("img",{attrs:{src:a(310),alt:"alt"}})]),t._v(" "),s("p",[t._v("接下来我们进行合并操作：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --autosquash -i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit_sha"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("注意，这里的 "),s("code",[t._v("commit_sha")]),t._v(" 是 older commit "),s("code",[t._v("6394dc")]),t._v("。")]),t._v(" "),s("p",[t._v("Git这时会很机智的补全单词，不需要手动输入了。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(311),alt:"alt"}})]),t._v(" "),s("p",[t._v("直接保存退出，重新编辑提交信息即可。")]),t._v(" "),s("p",[t._v("以上两种方式，一种是提交时轻松，合并时麻烦，另外一种相反。可以根据喜好来选择使用。")]),t._v(" "),s("h2",{attrs:{id:"bug修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bug修改"}},[t._v("#")]),t._v(" Bug修改")]),t._v(" "),s("ol",[s("li",[t._v("创建新分支修复bug，此时正在开发的分支有工作没有提交，使用"),s("code",[t._v("git stash")]),t._v("将当前工作储存")]),t._v(" "),s("li",[t._v("在哪个分支上改Bug，就在哪个分支创建临时分支，完成后合并分支，删除临时分支")]),t._v(" "),s("li",[s("code",[t._v("git stash list")]),t._v("查看之前保存的工作现场")]),t._v(" "),s("li",[t._v("恢复工作现场")])]),t._v(" "),s("blockquote",[s("p",[t._v("一是用"),s("code",[t._v("git stash apply")]),t._v("恢复，但是恢复后，stash内容并不删除，需要用"),s("code",[t._v("git stash drop")]),t._v("来删除;"),s("br"),t._v("\n另一种方式是用"),s("code",[t._v("git stash pop")]),t._v("，恢复的同时把stash内容也删了")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("将修改的Bug的那次提交复制给其他分支"),s("code",[t._v("git cherry-pick <commit_id>")])])]),t._v(" "),s("h2",{attrs:{id:"分支管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),s("ol",[s("li",[t._v("分支关联")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果该远程分支不存在，则会被新建，但本地和远程没有关联")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#在远程创建一个与本地branch_name同名的分支并追踪")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin branch_name\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin branch_name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :master "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等同于 $ git push origin --delete master")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建本地分支跟踪分支<本地分支名>，并从远程分支<远程主机名>/<远程分支名>拉取代码。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --track "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch -c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("本地分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#远程新建了一个分支，本地没有该分支，命令会在本地新建分支branch_name，并自动跟踪")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout --track origin/branch_name\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#建立当前分支与指定远程分支的追踪关系，但不会拉取代码。参数"-u"和"--set-upstream-to"同样用处。')]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -u "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程主机名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("分支操作命令")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("分支操作")]),t._v(" "),s("th",[t._v("命令")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("创建分支")]),t._v(" "),s("td",[s("code",[t._v("git branch <name>")]),s("br"),t._v("创建叫name的分支，但仍然停留在当前分支。")])]),t._v(" "),s("tr",[s("td",[t._v("删除分支")]),t._v(" "),s("td",[s("code",[t._v("git branch -d <name>")]),t._v("：参数为-D则为强制删除。"),s("br"),s("code",[t._v("git push origin --delete <name>")]),t._v(" ：删除远程仓库的叫name的分支，同名的本地分支并不会被删除，所以还需要单独删除本地同名分支"),s("br"),s("code",[t._v("git branch -dr <remote>/<branch-name>")]),t._v("：没有删除远程分支，只是删除 git branch -r 列表中的追踪分支。一般只有git push命令可以修改远程仓库。"),s("br")])]),t._v(" "),s("tr",[s("td",[t._v("切换分支")]),t._v(" "),s("td",[s("code",[t._v("git switch <name>")]),s("br"),s("code",[t._v("git checkout <name>")])])]),t._v(" "),s("tr",[s("td",[t._v("创建+切换分支")]),t._v(" "),s("td",[s("code",[t._v("git switch -c <name>")]),s("br"),s("code",[t._v("git checkout -b <name>")]),s("br"),t._v("上方两条命令一个意思：如果分支存在则只切换分支。不存在则创建叫name的分支，然后切换到该分支。相当于两条命令："),s("code",[t._v("git branch <name>")]),t._v("，"),s("code",[t._v("git checkout <name>")])])]),t._v(" "),s("tr",[s("td",[t._v("查看分支")]),t._v(" "),s("td",[s("code",[t._v("git branch")]),t._v("：查看本地分支，当前分支前面会标一个*号。"),s("br"),s("code",[t._v("git branch -r")]),t._v("：查看远程分支。"),s("br"),s("code",[t._v("git branch -a")]),t._v("：查看本地分支和远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）。"),s("br"),s("code",[t._v("git branch -vv")]),t._v("：查看本地分支对应的远程分支。")])]),t._v(" "),s("tr",[s("td",[t._v("重命名分支")]),t._v(" "),s("td",[t._v("git branch -m oldName newName")])])])]),t._v(" "),s("h2",{attrs:{id:"开发小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发小结"}},[t._v("#")]),t._v(" 开发小结")]),t._v(" "),s("ol",[s("li",[t._v("关联远程仓库时，调用"),s("code",[t._v("git branch -vv")]),t._v("查看分支关联状态，确保分支建立联系"),s("br"),t._v(" "),s("code",[t._v("git branch --set-upstream-to <远程仓库别名>/<远程仓库分支>")])])]),t._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("h3",{attrs:{id:"fork-pull-协作模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fork-pull-协作模式"}},[t._v("#")]),t._v(" “Fork + Pull”协作模式")]),t._v(" "),s("p",[t._v('存在一个"公共主库"，最新代码都是从"公共主库"拉取，fork了一个"公共主库的项目"到自己的账号下为"自己拥有的远程仓库"，以后提交代码前都是从"公共主库"拉取最新代码。我们只能向"自己拥有的远程仓库"推送代码，只有在经过项目组其他成员的review后我们才能从"自己拥有的远程仓库"向"公共仓库"提交合并请求，实现最后的代码合并。这样做能实现能减少多人开发代码提交冲突，而且我们提交代码只是向自己账号下的fork仓库提交不存在提交冲突。每次的开发需求都创建一个特定的开发分支，通过分支区分代码，方便代码回滚。')]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Git 修改指定远程仓库的push地址")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url --push "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库别名"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程仓库URL"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("ol",[s("li",[t._v("仓库管理员 设置代码审查")])]),t._v(" "),s("blockquote",[s("p",[t._v("设置指定人员为某仓库默认的代码审核/测试人员后，每当有新的Pull Request以此仓库内分支为目标分支时，系统会通知指定人员前去审查提交的Pull Request（也就是改动的代码内容），同时也可以设置合并Pull Request的门槛（例如是否需要全部指定人员同意才可以合并）。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("开发者 提交Pull Request")])]),t._v(" "),s("blockquote",[s("p",[t._v("开发者通过 Fork仓库的分支向源仓库的分支 或 同仓库内的工作分支向源分支 提交Pull Request的方式来发起一个代码审查的请求，以达到更新源分支的代码的目的。")])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("审查者 进行代码审核/测试")])]),t._v(" "),s("blockquote",[s("p",[t._v("指定人员查看开发者提交的Pull Request内容，并决定是否同意接受该开发者的改动。")])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("仓库管理员 合并 Pull Request")])]),t._v(" "),s("blockquote",[s("p",[t._v("仓库的管理人员在审查者同意后，即可通过合并Pull Request的方式把开发者的文件改动内容同步到源分支。")])]),t._v(" "),s("h3",{attrs:{id:"多分支模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多分支模式"}},[t._v("#")]),t._v(" 多分支模式")]),t._v(" "),s("ul",[s("li",[t._v("master ： 生产分支，即该分支与当前生产代码版本一致。")]),t._v(" "),s("li",[t._v("develop ： 开发分支，该分支为当前开发版本分支，每个里程碑结点都须先合并到master，再进行后续开发。")]),t._v(" "),s("li",[t._v("hotfix ：补丁分支，该分支用于修复生产BUG，在修复问题前，从master分支派生而来，修复完成后，将该分支分别合并到 master和develop分支。"),s("br"),t._v(" "),s("img",{attrs:{src:"/imgs/record/git_problem/%E5%A4%9A%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F.png",alt:"多分支开发模式"}})])]),t._v(" "),s("ol",[s("li",[t._v("项目git仓库创建完成后，基于 master分支 创建 develop分支，项目团队的功能开发均在develop分支上进行；")]),t._v(" "),s("li",[t._v("产品首次发布生产版本时，先将 develop分支 的代码合并到master分支，并从合并后的master分支打包项目部署生产。")]),t._v(" "),s("li",[t._v("产品后续功能迭代开发继续在develop分支进行。")]),t._v(" "),s("li",[t._v("当生产版本发现重大BUG需要紧急修复时，基于当前master分支创建hotfix分支，并在hotfix分支上修复该BUG。hotfix分支上完成BUG修复后，将该分支代码分别合并到master分支和develop分支。合并完成后，master分支代码打包发布生产修复BUG；develop分支继续后续功能开发。")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("注意：每次生产发布关键版本，建议对该版本打tag，以便代码控制和版本对比。")])]),t._v(" "),s("h2",{attrs:{id:"git常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" Git常用命令")]),t._v(" "),s("ol",[s("li",[t._v("git add")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#一次性添加所有可用的文件")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#增加更新和新创建的文件,忽略删除的文件")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --ignore-removal "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#增加修改和删除的文件,忽略新创建的文件")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -u\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#通过通配符添加文件")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.java\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Git撤销add")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("git commit")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#提交所有修改的快照。这个选项只考虑git中已经添加的文件")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#修改最后一次的提交信息")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -amend\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("git commit")]),s("br"),t._v("\n如果没有设置 -m 选项，Git 默认会打开 "),s("RouterLink",{attrs:{to:"/record/Linux命令行.html#_6-vim"}},[t._v("vim")]),t._v(" 提交信息")],1)]),t._v(" "),s("li",[s("p",[s("code",[t._v("git commit -a")]),t._v(" 可以跳过"),s("code",[t._v("git add [file]")]),s("br"),t._v(" "),s("code",[t._v("git commit -a")]),t._v(" 只能提交已经存在的文件，提交新建的文件时会失败")])])])]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("git status")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看显示工作目录和暂存区的状态")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -s "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#紧凑的格式输出状态")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git status")]),t._v("不显示已经commit到项目历史中去的信息,查看项目历史的信息要使用"),s("code",[t._v("git log")])]),t._v(" "),s("li",[s("code",[t._v("git status -s")]),s("br"),t._v("\n新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。\nM 有两个可以出现的位置，出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 M 表示该文件被修改了并放入了暂存区。")])])]),t._v(" "),s("ol",{attrs:{start:"4"}},[s("li",[t._v("git diff")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示暂存区和工作区的差异")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示暂存区和本地仓库的差异")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --staged "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" $ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --cached "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示工作区和本地仓库的差异(HEAD 指向的是本地仓库中最新提交的版本)")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示两个提交之间的差异")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit1-sha"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commit2-sha"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Git Diff 比较分支差异")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("1")]),t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[s("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),t._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("$ git diff HEAD^")]),s("br"),t._v("\n比较 workspace 与最新commit的前一次commit的差异")]),t._v(" "),s("li",[s("code",[t._v("$ git diff HEAD~2")]),s("br"),t._v("\n比较 workspace 与上2次提交的差异，相当于 git diff HEAD~2 HEAD~0，注意两个HEAD的位置，diff显示的结果表示 后一个(HEAD~0) 相对于 前一个的修改(HEAD~2)")])])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("git log")]),t._v(" "),s("li",[t._v("git stash"),s("br"),t._v("\ngit stash 命令使你能够在不提交当前分支的情况下切换分支，保存未完成的工作")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#保存工作内容")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#检查存储的藏品")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#恢复工作内容")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#恢复工作内容(保存记录会从git stash list删除)")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash pop\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看文件在藏匿前和藏匿后的变化")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash show\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#显示文件的变化内容")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash show -p\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#删除保存内容的对列")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("stash id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#清空保存内容的对列")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#工作藏在某一新分支上")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash branch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Branch Name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h3",{attrs:{id:"git命令图解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git命令图解"}},[t._v("#")]),t._v(" Git命令图解")]),t._v(" "),s("p",[s("img",{attrs:{src:"/imgs/record/git_problem/git%E6%B5%81%E7%A8%8B.png",alt:"git命令"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);